#include <stdio.h>
#include <pthread.h>
pthread_cond_t cond = PTHREAD_COND_INITIALIZER;
pthread_mutex_t lock = PTHREAD_MUTEX_INITIALIZER;
int ready = 0;
void* producer(void *arg) {
    pthread_mutex_lock(&lock);
    ready = 1;
    printf("Producer: Signal sent.
");
    pthread_cond_signal(&cond);
    pthread_mutex_unlock(&lock);
    return NULL;
}
void* consumer(void *arg) {
    pthread_mutex_lock(&lock);
    while (!ready) {
        pthread_cond_wait(&cond, &lock);
    }
    printf("Consumer: Signal received.
");
    pthread_mutex_unlock(&lock);
    return NULL;
}
int main() {
    pthread_t prod, cons;
    pthread_create(&prod, NULL, producer, NULL);
    pthread_create(&cons, NULL, consumer, NULL);
    pthread_join(prod, NULL);
    pthread_join(cons, NULL);
    return 0;
}