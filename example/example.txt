//profiles.go
package profiles

// Profile represents a user's profile data
type Profile struct {
    Username      string   `json:"username"`
    TypingSpeeds  []int    `json:"typing_speeds"`
    AccuracyRates []float64 `json:"accuracy_rates"`
}

// Profiles contains metadata and a list of all profiles
type Profiles struct {
    LastActiveProfile string    `json:"last_active_profile"`
    Users             []Profile `json:"users"`
}

// ProfileBackend defines the interface for profile management
type ProfileBackend interface {
    LoadProfile(username string) (*Profile, error)   // Load a specific profile or the last active one
    SaveProfile(profile *Profile) error             // Save a single profile
    UpdateLastActiveProfile(username string) error  // Update the last active profile
}
 // local.go
 
package profiles

import (
    "encoding/json"
    "fmt"
    "os"
)

type LocalProfileBackend struct {
    ProfilesDir       string // Directory containing profile files
    LastActiveProfile string // Path to the metadata file for the last active profile
}

// NewLocalProfileBackend creates a new instance of LocalProfileBackend
func NewLocalProfileBackend(profilesDir, lastActiveProfile string) *LocalProfileBackend {
    return &LocalProfileBackend{
        ProfilesDir:       profilesDir,
        LastActiveProfile: lastActiveProfile,
    }
}

// LoadProfile retrieves a specific profile or the last active one if username is empty
func (l *LocalProfileBackend) LoadProfile(username string) (*Profile, error) {
    if username == "" {
        // Read the last active profile from the metadata file
        data, err := os.ReadFile(l.LastActiveProfile)
        if err != nil {
            return nil, fmt.Errorf("failed to load last active profile: %v", err)
        }
        username = string(data)
    }

    // Read the profile file
    profilePath := fmt.Sprintf("%s/%s.json", l.ProfilesDir, username)
    file, err := os.Open(profilePath)
    if os.IsNotExist(err) {
        return nil, fmt.Errorf("profile '%s' not found", username)
    } else if err != nil {
        return nil, err
    }
    defer file.Close()

    var profile Profile
    if err := json.NewDecoder(file).Decode(&profile); err != nil {
        return nil, err
    }
    return &profile, nil
}

// SaveProfile saves a single profile to its file
func (l *LocalProfileBackend) SaveProfile(profile *Profile) error {
    profilePath := fmt.Sprintf("%s/%s.json", l.ProfilesDir, profile.Username)
    file, err := os.Create(profilePath)
    if err != nil {
        return err
    }
    defer file.Close()

    return json.NewEncoder(file).Encode(profile)
}

// UpdateLastActiveProfile updates the last active profile metadata
func (l *LocalProfileBackend) UpdateLastActiveProfile(username string) error {
    return os.WriteFile(l.LastActiveProfile, []byte(username), 0644)
}

//ssh.go

package profiles

import (
    "encoding/json"
    "fmt"
    "golang.org/x/crypto/ssh"
)

type SSHProfileBackend struct {
    Server            string // SSH server address
    ProfilesDir       string // Remote directory containing profile files
    LastActiveProfile string // Remote metadata file for the last active profile
    Username          string // SSH username
    Password          string // SSH password
}

// NewSSHProfileBackend creates a new instance of SSHProfileBackend
func NewSSHProfileBackend(server, profilesDir, lastActiveProfile, username, password string) *SSHProfileBackend {
    return &SSHProfileBackend{
        Server:            server,
        ProfilesDir:       profilesDir,
        LastActiveProfile: lastActiveProfile,
        Username:          username,
        Password:          password,
    }
}

func (s *SSHProfileBackend) connect() (*ssh.Client, error) {
    config := &ssh.ClientConfig{
        User: s.Username,
        Auth: []ssh.AuthMethod{
            ssh.Password(s.Password),
        },
        HostKeyCallback: ssh.InsecureIgnoreHostKey(),
    }

    return ssh.Dial("tcp", s.Server, config)
}

// LoadProfile retrieves a specific profile or the last active one if username is empty
func (s *SSHProfileBackend) LoadProfile(username string) (*Profile, error) {
    client, err := s.connect()
    if err != nil {
        return nil, err
    }
    defer client.Close()

    if username == "" {
        // Read the last active profile from the remote metadata file
        content, err := s.readRemoteFile(client, s.LastActiveProfile)
        if err != nil {
            return nil, fmt.Errorf("failed to load last active profile: %v", err)
        }
        username = string(content)
    }

    // Read the profile file from the remote server
    profilePath := fmt.Sprintf("%s/%s.json", s.ProfilesDir, username)
    content, err := s.readRemoteFile(client, profilePath)
    if err != nil {
        return nil, fmt.Errorf("failed to load profile '%s': %v", username, err)
    }

    var profile Profile
    if err := json.Unmarshal(content, &profile); err != nil {
        return nil, err
    }
    return &profile, nil
}

// SaveProfile saves a single profile to the remote server
func (s *SSHProfileBackend) SaveProfile(profile *Profile) error {
    client, err := s.connect()
    if err != nil {
        return err
    }
    defer client.Close()

    data, err := json.Marshal(profile)
    if err != nil {
        return err
    }

    profilePath := fmt.Sprintf("%s/%s.json", s.ProfilesDir, profile.Username)
    return s.writeRemoteFile(client, profilePath, data)
}

// UpdateLastActiveProfile updates the last active profile metadata on the remote server
func (s *SSHProfileBackend) UpdateLastActiveProfile(username string) error {
    client, err := s.connect()
    if err != nil {
        return err
    }
    defer client.Close()

    return s.writeRemoteFile(client, s.LastActiveProfile, []byte(username))
}

// Helper functions for SSH operations...
func (s *SSHProfileBackend) readRemoteFile(client *ssh.Client, path string) ([]byte, error) {
    session, err := client.NewSession()
    if err != nil {
        return nil, err
    }
    defer session.Close()

    output, err := session.Output(fmt.Sprintf("cat %s", path))
    if err != nil {
        return nil, err
    }
    return output, nil
}

func (s *SSHProfileBackend) writeRemoteFile(client *ssh.Client, path string, data []byte) error {
    session, err := client.NewSession()
    if err != nil {
        return err
    }
    defer session.Close()

    stdin, err := session.StdinPipe()
    if err != nil {
        return err
    }

    go func() {
        defer stdin.Close()
        stdin.Write(data)
    }()

    return session.Run(fmt.Sprintf("cat > %s", path))
}

